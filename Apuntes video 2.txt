Temario:
* Boostrap
* Rutas (BrowseRouter)
* Componente
	-Estilos
	-Pase de datos
* Clases Typescript
* Hook useEffect


Boostrap
index.html ->
HEAD
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
BODY
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

Se puede instalar la dependencia de node(React boostrap).
Estilo con Bootstrap 
npm install react-bootstrap bootstrap



Rutas en React 
Instalar el paquete para manejar las rutas 
npm install react-router-dom 
Instalar el paquete para los tipos de referencia a rutas 
npm install --save-dev @types/react-router-dom


Componente 
<BrowseRouter>
<Route path="/ruta" element={Para retornar componente} />
</BrowseRouter>

path="*" -> todas las demás rutas

Componente -> función que retorna un elemento HTML
function Componente() {
return(
<>
HTML
</>
)}

Estilos en componente, react no acepta el atributo class=""
Sino que utiliza className=""

Para pasarle datos o parametro a mi componente, con objetos
function Componente({objeto}) {
return(
<>
HTML
</>
)}
</Componente objeto.atributo = "valor">

Operador condional:
const = objeto ? true : false;

Type -> podemos definir la estructura de un objeto que le pasaremos a un componente
type Objeto = {
id:number;
}

function Componente(args: Objeto){
args.id}

Clases typescript
Podemos definir al objeto en un archivo typescript
Objeto.ts ->
export default class Objeto{
id?(? pone opcional el atributo): tipo(number,string,boolean) =0;(Puedo inicializarlo)
}

Hook useEffect -> Una vez que se renderiza la pantalla se ejecuta la función
useEffect(()=>{
obtenerObjetos();
},[]);

